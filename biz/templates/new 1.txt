# business backend
from flask import Flask, render_template, redirect, flash, request, session, url_for
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
import os, re

app = Flask(__name__)
app.secret_key = os.urandom(16)
# setting up database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///biz0.db' # database file
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False # disabling track for better perfomance
db = SQLAlchemy(app)

# model - define structure of data
class Role(db.Model):
    __tablename__ = 'roles' # name of table

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, index=True)

    # spy to our class
    def __repr__(self):
        return '<Role %r>' % self.username


# now to the user class
class User(db.Model):
    # class to deal with the user
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, index=True, nullable=False)
    password = db.Column(db.String(50), nullable=False)

    def __repr__(self):
        return '<User %r>' % self.username

"""
# ensuring strong password is used
def password_sttrong(password):
    if len(password) < 8:
        return False
    if not re.search(r'[A-Z]', password):
        return False
    if not re.search(r'[a-z]', password):
        return False
    if not re.search(r'[\d]', password):
        return False
    if not re.search(r'[!@#$%^&*()|<>{}:,.?]', password):
        return False
    return True
"""

# welcome home part
@app.route('/')
def home():
    # web has started we are on home page now
    return render_template('home.html')


# let's login
@app.route('/login', methods=['GET', 'POST'])
def login():
    # login part
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            session['username'] = username
            flash ('login successful', 'success')
            return redirect(url_for('home'))
        else:
            flash ('Loging not successful', 'danger')
    return render_template('login.html')

# how about registering
@app.route('/register', methods=['GET', 'POST'])
def register():
    feedback = []
    # register part
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # password strength check
        conditions = [
                (r'[a-z]', "Atleast one lowercase"),
                (r'[A-Z]', "Atleast one uppercase"),
                (r'\d', "Atleast one number"),
                (r'[@$!%*?&#]', "Include at least one special character (@$!%*?&#)."),
                (r'.{8,}', "Atleast 8 characters long")
            ]


        # feedback
        for pattern, message in conditions:
            if not re.search(pattern, password):
                feedback.append(message)

        if feedback:
            return render_template('register.html', feedback=feedback, username=username)


        if username in User(username):
            flash('username already exist', 'danger')
            #return redirect(url_for('login'))
        else:
            hashed_password = generate_password_hash(password)
            new_user = User(username=username, password=hashed_password)
            db.session.add(new_user)
            db.session.commit()
            flash('success registered', 'success')
            return redirect(url_for('login'))
    return render_template('register.html')

# running our web
if __name__ == '__main__':
    with app.app_context():
        db.create_all() # creates all tables
    app.run(debug=True)